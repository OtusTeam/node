{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///home/nik/projects/webinar/node/2025-03/32%20-%20trpc/src/server/trpc.ts"],"sourcesContent":["import { initTRPC, TRPCError } from \"@trpc/server\";\n\nconst users: Record<string, string> = {\n   'admin-token': 'admin',\n   'anon-token': 'anon',\n}\n\nexport async function createContext({ req }: { req: Request }) {\n  const authHeader = req.headers.get('authorization');\n  const token = authHeader?.split(' ')[1] ?? null;\n\n  const role = token ? users[token] ?? '' : '';\n\n  return { role };\n}\n\nexport type Context = Awaited<ReturnType<typeof createContext>>;\n\nexport const t = initTRPC.context<Context>().create();\n\nconst isAdmin = t.middleware(({ ctx, next }) => {\n   if (ctx.role !== \"admin\") {\n     throw new TRPCError({ code: \"FORBIDDEN\" });\n   }\n\n   return next();\n});\n\nexport const router = t.router;\nexport const publicProcedure = t.procedure;\nexport const adminProcedure = t.procedure.use(isAdmin);\n\n\n\n// trpc server подключается в backend server, \n// а фронтенд работает через backend server с trpc\n\n// import { initTRPC, TRPCError } from \"@trpc/server\";\n\n\n\n// export async function createContext({ req }: { req: Request }) {\n//   const authHeader = req.headers.get('authorization');\n//   const token = authHeader?.split(' ')[1] ?? null;\n\n//   const role = token ? users[token] ?? '' : '';\n\n//   return { role };\n// }\n\n// export type Context = Awaited<ReturnType<typeof createContext>>;\n\n// export const t = initTRPC.context<Context>().create();\n\n// const isAdmin = t.middleware(({ ctx, next }) => {\n//   if (ctx.role !== \"admin\") {\n//     throw new TRPCError({ code: \"FORBIDDEN\" });\n//   }\n//   return next();\n// });\n\n// export const router = t.router;\n// export const publicProcedure = t.procedure;\n// export const adminProcedure = t.procedure.use(isAdmin);"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAEA,MAAM,QAAgC;IACnC,eAAe;IACf,cAAc;AACjB;AAEO,eAAe,cAAc,EAAE,GAAG,EAAoB;IAC3D,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;IACnC,MAAM,QAAQ,YAAY,MAAM,IAAI,CAAC,EAAE,IAAI;IAE3C,MAAM,OAAO,QAAQ,KAAK,CAAC,MAAM,IAAI,KAAK;IAE1C,OAAO;QAAE;IAAK;AAChB;AAIO,MAAM,IAAI,mKAAA,CAAA,WAAQ,CAAC,OAAO,GAAY,MAAM;AAEnD,MAAM,UAAU,EAAE,UAAU,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACxC,IAAI,IAAI,IAAI,KAAK,SAAS;QACxB,MAAM,IAAI,kKAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAY;IAC1C;IAEA,OAAO;AACV;AAEO,MAAM,SAAS,EAAE,MAAM;AACvB,MAAM,kBAAkB,EAAE,SAAS;AACnC,MAAM,iBAAiB,EAAE,SAAS,CAAC,GAAG,CAAC,UAI9C,8CAA8C;CAC9C,kDAAkD;CAElD,sDAAsD;CAItD,mEAAmE;CACnE,yDAAyD;CACzD,qDAAqD;CAErD,kDAAkD;CAElD,qBAAqB;CACrB,IAAI;CAEJ,mEAAmE;CAEnE,yDAAyD;CAEzD,oDAAoD;CACpD,gCAAgC;CAChC,kDAAkD;CAClD,MAAM;CACN,mBAAmB;CACnB,MAAM;CAEN,kCAAkC;CAClC,8CAA8C;CAC9C,0DAA0D","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///home/nik/projects/webinar/node/2025-03/32%20-%20trpc/src/db/prisma.ts"],"sourcesContent":["// src/db/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\nexport const prisma = new PrismaClient();"],"names":[],"mappings":"AAAA,mBAAmB;;;;AACnB;;AAEO,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///home/nik/projects/webinar/node/2025-03/32%20-%20trpc/src/server/api/routers/user.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { prisma } from \"@/db/prisma\";\nimport { router, publicProcedure, adminProcedure } from \"../../trpc\";\n\nexport const userRouter = router({\n  list: publicProcedure.query(() => {\n    return prisma.user.findMany();\n  }),\n\n  create: publicProcedure\n    .input(\n      z.object({\n        name: z.string().min(1),\n        email: z.string().email(),\n      })\n    )\n    .mutation(({ input }) => {\n      return prisma.user.create({ data: input });\n    }),\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,aAAa,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAC/B,MAAM,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QAC1B,OAAO,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ;IAC7B;IAEA,QAAQ,uHAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrB,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;IACzB,IAED,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE;QAClB,OAAO,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAAE,MAAM;QAAM;IAC1C;AACJ","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///home/nik/projects/webinar/node/2025-03/32%20-%20trpc/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { prisma } from \"@/db/prisma\";\nimport { router, publicProcedure } from \"../../trpc\";\n\nexport const postRouter = router({\n  list: publicProcedure.query(() => {\n    return prisma.post.findMany({ include: { user: true } });\n  }),\n\n  create: publicProcedure\n    .input(\n      z.object({\n        title: z.string().min(1),\n        content: z.string(),\n        userId: z.string(),\n      })\n    )\n    .mutation(({ input }) => {\n      return prisma.post.create({ data: input });\n    }),\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,aAAa,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAC/B,MAAM,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QAC1B,OAAO,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAE,SAAS;gBAAE,MAAM;YAAK;QAAE;IACxD;IAEA,QAAQ,uHAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,SAAS,+KAAA,CAAA,IAAC,CAAC,MAAM;QACjB,QAAQ,+KAAA,CAAA,IAAC,CAAC,MAAM;IAClB,IAED,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE;QAClB,OAAO,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAAE,MAAM;QAAM;IAC1C;AACJ","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/nik/projects/webinar/node/2025-03/32%20-%20trpc/src/server/api/routers/_app.ts"],"sourcesContent":["import { router } from \"../../trpc\";\nimport { userRouter } from \"./user\";\nimport { postRouter } from \"./post\";\n\nexport const appRouter = router({\n  user: userRouter,\n  post: postRouter,\n});\n\nexport type AppRouter = typeof appRouter;"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,YAAY,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAC9B,MAAM,yIAAA,CAAA,aAAU;IAChB,MAAM,yIAAA,CAAA,aAAU;AAClB","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/nik/projects/webinar/node/2025-03/32%20-%20trpc/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { appRouter } from \"@/server/api/routers/_app\";\nimport { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { createContext } from \"@/server/trpc\";\nimport { NextRequest } from \"next/server\";\n\n\n// история, как с graphQL - один эндпоинт для работы\n\nconst handler = (req: NextRequest) => {\n  return fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext,\n  });\n};\n\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAIA,oDAAoD;AAEpD,MAAM,UAAU,CAAC;IACf,OAAO,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QACzB,UAAU;QACV;QACA,QAAQ,yIAAA,CAAA,YAAS;QACjB,eAAA,uHAAA,CAAA,gBAAa;IACf;AACF","debugId":null}}]
}